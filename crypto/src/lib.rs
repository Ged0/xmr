extern crate libc;

use std::mem::transmute;
use std::thread;
use libc::{c_void, c_char, size_t};

mod ffi;

pub const FAST_HASH_LENGTH: usize = 32;
pub const SLOW_HASH_LENGTH: usize = 32;

pub fn fast_hash(data: &[u8]) -> [u8; FAST_HASH_LENGTH] {
    use ffi::cn_fast_hash;

    debug_assert!(FAST_HASH_LENGTH == ffi::HASH_SIZE);

    let output = &mut [0u8; FAST_HASH_LENGTH];    
    unsafe {
        cn_fast_hash(
            data.as_ptr() as *const c_void,
            data.len() as size_t,
            transmute::<*mut u8, *mut c_char>(output.as_mut_ptr()),
        )
    }

    *output
}

pub fn slow_hash(data: &[u8]) -> [u8; SLOW_HASH_LENGTH] {
    use ffi::cn_slow_hash;

    debug_assert!(SLOW_HASH_LENGTH == ffi::HASH_SIZE);

    // FIXME: this is stupid, do it the safe way
    // *const u8 can't be sent between threads.
    let data_ptr = unsafe { transmute::<*const u8, usize>(data.as_ptr()) };
    let data_len = data.len() as size_t;

    let child = thread::Builder::new().stack_size(4194304).spawn(move || {
        let output = &mut [0u8; FAST_HASH_LENGTH];    
        unsafe {
            cn_slow_hash(
                transmute::<usize, *const c_void>(data_ptr),
                data_len,
                transmute::<*mut u8, *mut c_char>(output.as_mut_ptr()),
            )
        }

        *output
    }).unwrap();

    child.join().unwrap()
}

#[cfg(test)]
pub mod tests {
    use super::*;

    struct TestVector {
        expected: &'static [u8],
        input: &'static [u8],
    }

    const SLOW_HASH_TEST_VECTORS: &'static [TestVector] = &[
        TestVector {
            expected: &[
                0x2f, 0x8e, 0x3d, 0xf4, 0x0b, 0xd1, 0x1f, 0x9a, 0xc9, 0x0c, 0x74,
                0x3c, 0xa8, 0xe3, 0x2b, 0xb3, 0x91, 0xda, 0x4f, 0xb9, 0x86, 0x12,
                0xaa, 0x3b, 0x6c, 0xdc, 0x63, 0x9e, 0xe0, 0x0b, 0x31, 0xf5,
            ],
            input: &[
                0x64, 0x65, 0x20, 0x6f, 0x6d, 0x6e, 0x69, 0x62, 0x75, 0x73, 0x20,
                0x64, 0x75, 0x62, 0x69, 0x74, 0x61, 0x6e, 0x64, 0x75, 0x6d,
            ],
        },
        TestVector {
            expected: &[
                0x72, 0x2f, 0xa8, 0xcc, 0xd5, 0x94, 0xd4, 0x0e, 0x4a, 0x41, 0xf3,
                0x82, 0x27, 0x34, 0x30, 0x4c, 0x8d, 0x5e, 0xff, 0x7e, 0x1b, 0x52,
                0x84, 0x08, 0xe2, 0x22, 0x9d, 0xa3, 0x8b, 0xa5, 0x53, 0xc4,
            ],
            input: &[
                0x61, 0x62, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x73, 0x20, 0x63, 0x61,
                0x75, 0x74, 0x65, 0x6c, 0x61, 0x20, 0x6e, 0x6f, 0x6e, 0x20, 0x6e,
                0x6f, 0x63, 0x65, 0x74,
            ],
        },
        TestVector {
            expected: &[
                0xbb, 0xec, 0x2c, 0xac, 0xf6, 0x98, 0x66, 0xa8, 0xe7, 0x40, 0x38,
                0x0f, 0xe7, 0xb8, 0x18, 0xfc, 0x78, 0xf8, 0x57, 0x12, 0x21, 0x74,
                0x2d, 0x72, 0x9d, 0x9d, 0x02, 0xd7, 0xf8, 0x98, 0x9b, 0x87,
            ],
            input: &[
                0x63, 0x61, 0x76, 0x65, 0x61, 0x74, 0x20, 0x65, 0x6d, 0x70, 0x74,
                0x6f, 0x72,
            ],
        },
        TestVector {
            expected: &[
                0xb1, 0x25, 0x7d, 0xe4, 0xef, 0xc5, 0xce, 0x28, 0xc6, 0xb4, 0x0c,
                0xeb, 0x1c, 0x6c, 0x8f, 0x81, 0x2a, 0x64, 0x63, 0x4e, 0xb3, 0xe8,
                0x1c, 0x52, 0x20, 0xbe, 0xe9, 0xb2, 0xb7, 0x6a, 0x6f, 0x05,
            ],
            input: &[
                0x65, 0x78, 0x20, 0x6e, 0x69, 0x68, 0x69, 0x6c, 0x6f, 0x20, 0x6e,
                0x69, 0x68, 0x69, 0x6c, 0x20, 0x66, 0x69, 0x74,
            ],
        },
    ];

    #[test]
    fn slow_hash_test_vector() {
        for vector in SLOW_HASH_TEST_VECTORS.iter() {
            let hash = slow_hash(vector.input);

            assert_eq!(&hash, vector.expected);
        }
    }
}
